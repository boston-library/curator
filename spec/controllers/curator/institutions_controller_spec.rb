# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Curator::InstitutionsController, type: :controller do
  routes { Curator::Engine.routes }
  # This should return the minimal set of attributes required to create a valid
  # Institution. As you add validations to Institution, be sure to
  # adjust the attributes here as well.

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InstitutionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let(:serializer_class) { Curator::InstitutionSerializer }

  context 'JSON(Default)' do
    let!(:format) { :json }
    let!(:institution) { create(:curator_institution, :with_location, :with_metastreams) }
    let!(:serialized_hash) { serializer_class.new(institution, format).serializable_hash['institution'].as_json }
    # Have to add as_json so the dates match

    describe "GET #index" do
      it "returns a success response" do
        get :index, params: { format: format }
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
        expect(json_response).to be_a_kind_of(Hash).and have_key('institutions')
        expect(json_response).to include('institutions' => include(a_hash_including(serialized_hash)))
      end
    end

    describe "GET #show" do
      context 'with :id' do
        it "returns a success response" do
          get :show, params: { id: institution.to_param, format: format }
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json')
          expect(json_response).to be_a_kind_of(Hash).and have_key('institution')
          expect(json_response['institution']).to eq(serialized_hash)
        end
      end
      
      context 'with #ark_id as :id' do
        it "returns a success response" do
          get :show, params: { id: institution.ark_id, format: format }
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json')
          expect(json_response).to be_a_kind_of(Hash).and have_key('institution')
          expect(json_response['institution']).to eq(serialized_hash)
        end
      end
    end

    skip 'POST #create' do
      context "with valid params" do
        it "creates a new Curator::Institution" do
          expect {
            post :create, params: { institution: valid_attributes }, session: valid_session
          }.to change(Curator::Institution, :count).by(1)
        end

        it "renders a JSON response with the new institution" do
          post :create, params: { institution: valid_attributes }, session: valid_session
          expect(response).to have_http_status(:created)
          expect(response.content_type).to eq('application/json')
          expect(response.location).to eq(institution_url(Curator::Institution.last))
        end
      end

      context "with invalid params" do
        it "renders a JSON response with errors for the new institution" do
          post :create, params: { institution: invalid_attributes }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end

    skip "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested institution" do
          institution = Curator::Institution.create! valid_attributes
          put :update, params: { id: institution.to_param, institution: new_attributes }, session: valid_session
          institution.reload
          skip("Add assertions for updated state")
        end

        it "renders a JSON response with the institution" do
          institution = Curator::Institution.create! valid_attributes

          put :update, params: { id: institution.to_param, institution: valid_attributes }, session: valid_session
          expect(response).to have_http_status(:ok)
          expect(response.content_type).to eq('application/json')
        end
      end

      skip "with invalid params" do
        it "renders a JSON response with errors for the institution" do
          institution = Curator::Institution.create! valid_attributes

          put :update, params: { id: institution.to_param, institution: invalid_attributes }, session: valid_session
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to eq('application/json')
        end
      end
    end
  end
end
